# -*- coding: utf-8 -*-
"""functions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1384C0pE9dgeCF7_ni0NhqwRxc2L4uWpg
"""

#functions
#named block
#logic/statememnt==name

#functions=>code smaller part convert
def func(a):
  print(a)

#parameter   ==> formal parameter  / informal argument
func(10)
#calling  ==>

def func(a,b):
  print("a:  ",a ,"b: ",b)

func(10,15)

#default
def func(a,b=35):
  print("a:  ",a ,"b: ",b)

func(10)

def func(a,b=35):
  print("a:  ",a ,"b: ",b)

func(10,999)

#variable length argument ==> accept the args as per user request
#accept the value in the form of tuple
def func(*args):
  print("args:",args)
func(24)
func()
func(15,999)
func(1,3,45,67,8,9)

#accept the value in the form of dictionary
def func(**kwargs):
  print("kwargs:",kwargs)
func(a=15,b=999)
func(salary=15,b=999)

#waf which takes n as parameter in the form of fibbonacci series
def func(n):
  a,b=0,1
  count=0
  while count<n:
    print(a)
    a,b=b,a+b
    count+=1
func(6)

#waf to takes two parameters find out hcf.
def func(a,b):
  if a>b:
    small=b
  else:
    small=a
  for i in range(1,small+1):
    if (a%i==0) and (b%i==0):
      hcf = i
  return hcf
func(10,20)

# check it is pallindrome or not in the form of dictionary using function.
def fun(n):
  mydict = {}
  rev = 0
  temp = n
  while(n!=0):
    digit = n%10
    rev = rev*10 + digit
    n//=10
  if(temp == rev):
     mydict[temp] = 'True'
  else:
     mydict[temp] = 'False'
  return mydict
fun(121)o

